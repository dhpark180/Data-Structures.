Array (배열), List (리스트)
a. 데이터를 연속적인 메모리 공간에 저장하고, 저장된 곳의 주소(address, reference)를
통해 매우 빠른 시간에 접근할 수 있는 가장 많이 쓰이는 기본적인 자료구조
b. C, C++, java, Python 등의 언어에서는 모두 array 자료구조 지원 (Python에서는 list,
array 등의 자료구조가 배열 자료구조임)


Python 언어에서의 list A

항상 객체의 주소만 저장하기 때문에, 리스트의 셀의 크기를 메모리의 주소를
표현할 수 있는 (4 바이트 또는) 8 바이트로 고정하면 된다. 모든 셀의 크기가
같기 때문에 index에 의해 O(1) 시간 접근이 가능하다

파이썬의 리스트는 읽기/쓰기 이외에 훨씬 더 유연하고 강력한 연산을 지원한다

1. A.append(value): 맨 오른쪽 (뒤)에 새로운 값 value를 삽입

2. A.pop(i): A[i] 값을 지운 후 리턴 (i번째 오른쪽 값들은 왼쪽으로 한
칸씩 당겨져, cell의 수가 하나 감소)
a. pop()은 맨 오른쪽 값을 지움

3. A.insert(i, value): A[i] = value 연산 (단, A[i], A[i+1], …
값들은 오른쪽으로 한 칸씩 이동해 A[i]를 비운 후, value 값 저장)

4. A.remove(value): value를 찾아 제거 (value 오른쪽의 값들은
왼쪽으로 한 칸씩 이동해 빈 공간을 메꿈)

5. A.index(value): value 값이 처음으로 등장하는 index 리턴

6. A.count(value): value 값이 몇 번 등장하는 지 횟수를 세어 리턴

7. A[i:j] : A[i], …, A[j-1]까지를 복사해 새로운 리스트 생성하여
리턴

a. slicing 연산이라 부름

8. value in A: 멤버십 연산자 - A에 value가 있으면 True, 없으면 False

b. B = A[i: j]라고 하면 A[i], …, A[j-1]까지가 복사되어 B가
됨. A는 전혀 변화가 없음에 유의!

